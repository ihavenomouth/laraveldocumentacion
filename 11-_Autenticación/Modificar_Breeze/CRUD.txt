Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-02-14T14:53:14+01:00

====== CRUD ======

Aunque el objetivo sea generar un sistema CRUD completo que nos permita gestionar enlaces, vamos a comenzar por simplemente listar los enlaces creados y crear nuevos enlaces.

Una vez realizadas estas dos operaciones, el resto de las operaciones (mostrar información de un enlace concreto, modificar un enlace y eliminarlo) se deberían poder realizar adaptando el contenido. 


===== La vista enlaces =====

Lo más sencillo va a ser comenzar con la pantalla de //crear enlace//. Como es una operación de crear un nuevo enlace, tendremos que utilizar una ruta llamada ''/enlaces/create'' cuyo nombre será ''enlaces.create'' y al usar el método GET nos dirigirá a una nueva ventana que permita crear un enlace.

Antes de nada vamos a incluir un enlace en la barra de navegación de la vista ''enlaces'' para que incluya un enlace a esta ruta si estamos autenticados. Ademaś también vamos a incluir un botón que nos dirija a la misma ruta.
'''
@auth
<li><a href="/enlaces/create">Crear enlace</a></li>
@endauth
'''

'''

...

<div class="contenido">
  @auth
  <form method="get" action="/enlaces/create">
    <label for="crearenlace">Acciones:</label><br>
    <input id="crearenlace" type="submit" value="Crear nuevo enlace">
  </form>
	
  <h2>Enlaces guardados</h2>

...
'''

Además, dentro de la lista sin ordenar (''<ul>''), incluiremos un bucle para mostrar los enlaces que se le pasarán más adelante como parámetro ''$enlaces''.
'''
@forelse ($enlaces as $e)
    <li><a href="http://{{$e->url}}">{{$e->nombre}}</a> [{{$e->categoria}}] </li>
@empty
    <li>No hay ningún enlace almacenado.</li>
@endforelse
'''

Ahora deberíamos crear la ruta en el fichero ''web.php''. Pero vamos a hacerlo bien. Del mismo modo que hemos creado la migración, vamos a crear también el modelo de datos y el controlador de las rutas que nos ayudarán en el uso de la base de datos.


===== Crear el modelo, el controlador y la migración =====

Si queremos crear el modelo, el controlador de recursos y la migración podríamos ejecutar algo como lo de abajo, pero no es lo que queremos ahora mismo:
''./vendor/bin/sail php artisan make:model -mrc Enlace''
	* ''-m'' : indica que se crearña también la migración
	* ''-c'' : indica que se creará también un controlador
	* ''-r'' : indica que el controlador será de tipo recurso

Sin embargo, ya tenemos creado la migración, por lo que no la necesitamos.
''./vendor/bin/sail php artisan make:model -rc Enlace''

Si lo hemos hecho todo correctamente, el modelo ''Enlace'' debe haberse creado para poder usar directamente la tabla ''enlaces'', por lo que no debemos tener que tocar nada.

Sí tenemos que cambiar código del controlador, evidentemente.


===== El fichero de rutas =====

Lo primero que vamos a hacer es decirle a nuestro fichero de rutas ''web.php'' qué rutas serán gestionadas por el controlador que acabamos de crear. Además, vamos a proteger las rutas que nos interesan también indicando que se usará el middleware ''auth''.

Modificamos nuestras rutas para que pasen el control al controlador (nunca mejor dicho) y que se gestionen allí. 
'''
use App\Http\Controllers\EnlaceController;

Route::get('/enlaces', [EnlaceController::class, 'index'])->name('enlaces.index');

Route::middleware('auth')->group(function () {
  Route::get('/enlaces/create', [EnlaceController::class, 'create'])->name('enlaces.create');
  Route::post('/enlaces/create', [EnlaceController::class, 'store'])->name('enlaces.store');
});
'''


===== El controlador EnlaceController.php =====

El controlador se ha creado en ''app/Http/Controllers/EnlaceController.php''.  Se tienen que modificar tres métodos, los correspondientes a las tres rutas que tenemos definidas en nuestro fichero de rutas.

El método ''index()'' corresponde a ''/enlaces'' y mostrará la página con los enlaces disponibles. Lo que hacemos es recuperar los enlaces usando el ORM de Laravel llamado Eloquent y se lo pasamos a la vista enlaces.
'''
public function index()
{
  $enlaces = Enlace::get();        
  return view('enlaces', ['enlaces' => $enlaces] );
}
'''

El método ''create()'' corresponde a [[/enlaces/create|''/enlaces/create'']] usando el método get. Lo único que tiene que hacer es mostrar la página con el formulario para crear un nuevo enlace.
'''
public function create()
{
  return view('crearenlace');
}
'''

Finalmente el método ''store()'' corresponde a [[/enlaces/create|''/enlaces/create'']] usando el método post. En el parámetro ''$request'' tendrá todos los datos que se le ha pasado en la petición. Lo que hace es crea un nuevo objeto de tipo ''Enlace'' usando Eloquent. Luego asigna los valores de la petición y guarda el resultado en la base de datos. finalmente recupera todos los enlaces y muestra la vista ''enlaces''.
'''
public function store(Request $request)
{
  $enlace = new Enlace();
  $enlace->nombre = $request->nombre;
  $enlace->url = $request->url;
  $enlace->categoria = $request->categoria;
  $enlace->save();
        
  $enlaces = Enlace::get();        
  return view('enlaces', ['enlaces' => $enlaces] );
}
'''


===== La vista crearenlace =====

Cuando se acceda a la ruta ''/enlaces/create'' usando get, se nos debe mostrar la ruta ''crearenlace'' que todavía no existe. Vamos a crear el fichero ''crearenlace.blade.php'' con este contenido:
'''
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enlaces</title>
    <link rel="stylesheet" href="/css/estilos.css">
    <style>
    </style>
</head>
<body>
<div class="cabecera">
    <h1>Enlaces</h1>
</div>

<nav>
    <ul>
        <li><a href="/">Inicio</a></li>
        <li><a href="/enlaces">Enlaces</a></li>

        @auth
        <li><a href="/enlaces/create">Nuevo enlace</a></li>
        @endauth
        
        @if (Route::has('login'))
          @auth
          <li><form method="POST" action="{{ route('logout') }}">
          @csrf
          <a href="{{route('logout') }}" onclick="event.preventDefault(); this.closest('form').submit();">
          Logout
          </a></form></li>
          @else
            <li><a href="{{ route('login') }}">Login</a></li>
            <li><a href="{{ route('register') }}">Registrarse</a></li>
          @endauth
        @endif
    </ul>
</nav>

<div class="contenido">
	@auth
	<h2>Crear nuevo enlace</h2>

	<form method="post" action="/enlaces/create">
	  @csrf
	  <label for="nombre">Nombre:</label><br>
	  <input type="text" name="nombre"><br>
	  <label for="url">URL:</label><br>
	  <input type="text" name="url"><br>
	  <label for="categoria">Categoria:</label><br>
	  <input type="text" name="categoria"><br>
	  <br>	  
	  <input id="crearenlace" type="submit" value="Crear enlace">
	</form>

    @endauth

    @guest
    <h2>Contenido protegido</h2>
    <p>No se puede acceder al contenido de esta página sin iniciar sesión. 
    <a href="{{ route('login') }}">Inicie sesión</a> para poder acceder.</p>
    @endguest
</div>
</body>
</html>
'''

No hay mucho de interés, sólo hay que recordar que:
	* Como el método del formulario es post, hay que añadir ''@csfr''
	* Los atributo name deben coincidir con el nombre de los campos de la tabla ''enlaces''.


===== Controlar errores =====

Todo parece funcionar correctamente hasta que intentamos crear dos enlaces con la misma URL. Al crear la tabla en la migración indicamos que el campo URL tenía que ser único. Al intentar crear dos enlaces se nos mostrará una excepción. ¿Cómo lo solucionamos?

Primero vamos a empezar por el controlador ''EnlaceController''. Vamos a modificar el código del método ''store()'':
	* Usaremos un try/catch alrededor del ''$enlace->save()''
	* Como estamos dentro de un namespace debemos usar un caracter de escape en el catch (ver la primera nota de https://php.vn.ua/manual/es/language.exceptions.php)
	* Finalmente, en el ''catch(\Exception $e)'' vamos a volver a la vista ''crearenlace'' pero esta vez indicando un mensaje de error.

'''
public function store(Request $request)
{
  $enlace = new Enlace();
  $enlace->nombre = $request->nombre;
  $enlace->url = $request->url;
  $enlace->categoria = $request->categoria;
  try{
    $enlace->save();
  }
  catch(\Exception $e){
    return view('crearenlace', ['error' => 'No se pudo crear el enlace, compruebe si ya existe esa URL en la lista de enlaces.'] );          
  }
        
  $enlaces = Enlace::get();        
  return view('enlaces', ['enlaces' => $enlaces] );
}
'''


En la vista ''crearenlace'' tendremos que tener en cuenta ahora que podemos tener un mensaje de error.
